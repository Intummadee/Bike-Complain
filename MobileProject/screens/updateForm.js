import { View, Text, StyleSheet, TouchableOpacity,SafeAreaView , ScrollView , StatusBar, TextInput } from 'react-native'
import React, { useState } from 'react';
import DateTimePicker from '@react-native-community/datetimepicker';


// time
import moment from 'moment';


// import Icon
import { MaterialCommunityIcons } from '@expo/vector-icons'; //‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏î‡∏µ 
import { Feather } from '@expo/vector-icons'; 
import { Entypo } from '@expo/vector-icons'; 


import { AntDesign } from '@expo/vector-icons'; 
// ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏´‡∏ô‡πâ‡∏≤Profile‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô -->  <AntDesign name="user" size={24} color="black" /> 



// Firebase
import firebase from "../database/firebaseDB";
import { LongPressGestureHandler } from 'react-native-gesture-handler';



const updateStore = (id, dataHistory, dataUser, navigation, time ,date,detail, place ) => {

    const dataIndex = dataUser.history.findIndex(item => {
        return Object.keys(item).every(key => item[key] === dataHistory[key]);
    });

    // console.log("Index ‡∏Ç‡∏≠‡∏á data ‡πÉ‡∏ô dataUser:", dataIndex); //index ‡∏Ç‡∏≠‡∏áhistory‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö

    const options = {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false
      };
      
    const formattedTime = time.toLocaleTimeString(undefined, options);
    // console.log("time", formattedTime); // time: 22:41
    // console.log("date", date.toLocaleDateString()); // date: 10/17/2023
     
    console.log("‚òÉÔ∏èhistory‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ ", dataUser.history[dataIndex]);
    console.log("time : ",time.toLocaleTimeString(undefined, options));
    dataUser.history[dataIndex] = {
        date: date.toLocaleDateString(),
        detail: detail,
        nameWin: dataHistory.nameWin,
        numberWin: dataHistory.numberWin,
        place: place,
        status: dataHistory.status,
        time: formattedTime,
        type: dataHistory.type,
        url: dataHistory.url,
        // ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡∏ü‡∏¥‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°
    }
    
     
    console.log("‚òÄÔ∏èhistory‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û", dataUser.history[dataIndex]);
    
    console.log("id = ", id);
    console.log(dataUser.name);
    console.log(dataUser.password);
    console.log(dataUser.email);
    navigation.goBack();
 
    const subjCollection = firebase.firestore().collection("Users");
    subjCollection.doc(id)
    .set({
        name: dataUser.name,
        password: dataUser.password,
        email: dataUser.email,
        history: dataUser.history,
    })
    .then(() => {
        // navigation.navigate("myProfile");
        navigation.navigate("history");
    }).catch(() => {
        alert("‡∏¢‡∏π‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å Add");
    })

};



const UpdateForm = ({ route }) => {

    const data1 = route.params.data; // data = {dataUser: {‚Ä¶}, data: {‚Ä¶}, id: 'Intummadee', index: 0, navigation: {‚Ä¶}}

    const dataHistory = data1.data; // data = {date: '12/11/2023', nameWin: '‡∏ô‡∏≤‡∏¢‡πÇ‡∏¢‡∏Ñ‡∏µ ‡∏Ç‡∏µ‡πà‡∏£‡∏∏‡πâ‡∏á‡∏û‡∏∏‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤', numberWin: '05', place: '‡∏ã‡∏≠‡∏¢‡πÄ‡∏Å‡∏Å‡∏µ1', status: 'green', time: "12:12" ,type: "‡∏ß‡∏≤‡∏à‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û"}
    const id = data1.id // id‡∏Ç‡∏≠‡∏áDocument‡πÉ‡∏ôFirebase
    const dataUser = data1.dataUser // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏áuser‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢
    const navigation = data1.navigation;
    const index = data1.index; // index‡∏Ñ‡∏∑‡∏≠ ‡∏•‡∏≥‡∏î‡∏±‡∏ö history ‡πÉ‡∏ô array History ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    console.log("dataHistory üêâ ",dataHistory); 
    // console.log("dataHistory", dataHistory.place); 
    // console.log("dataHistory", dataHistory.nameWin); 

    // input ‡∏Ç‡∏≠‡∏á ‡∏ü‡∏≠‡∏£‡πå‡∏°
    const [detail, setDetail] = useState(dataHistory.detail);

    const [place, setPlace] = useState(dataHistory.place)
    

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• time ‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô Invalid date
    const timeString = dataHistory.time;
    console.log("timeString ",timeString);
    const [hours, minutes] = timeString.split(":");
    const num = new Date(); // 2023-12-30T00:00:00.000Z
    num.setHours(parseInt(hours, 10));
    num.setMinutes(parseInt(minutes, 10)); 

    // input ‡∏Ç‡∏≠‡∏á time
    const [time, setTime] = useState(num);
    const [showTimePicker, setShowTimePicker] = useState(false);
    const onChangeTime = (event, selectedTime) => {
        setShowTimePicker(false);
        if (selectedTime) {
          setTime(selectedTime);
        }
    };

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• date‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ôtime ‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô Invalid date
    const dateString = dataHistory.date;
    const [day, month, year] = dateString.split('/');
    const dateObject = new Date(`${year}-${month}-${day}`); // 2023-12-30T00:00:00.000Z

    // ‡∏û‡∏ß‡∏ÅCalendar
    const [date, setDate] = useState(dateObject);
    const [showDatePicker, setShowDatePicker] = useState(false);
    const onChangeDate = (event, selectedDate) => {
        setShowDatePicker(false);
        if (selectedDate) {
          setDate(selectedDate);
        }
    };





  return (
<SafeAreaView style={styles.container}>
    <ScrollView style={styles.scrollView}>
      <View style={styles.list}>
       
            <View style={{flex:0.15,}}>
                <Text style={{fontSize:20, fontWeight:"bold"}}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á :</Text>
                <TouchableOpacity style={[styles.touchOpacity, {width:"45%", height:50, justifyContent:'center', backgroundColor:dataHistory.status }]} onPress={()=>{console.log("clickk!!");}}>
                    <Text style={{color:'white', fontWeight:"bold"}}>
                        { dataHistory.status=="green" ? "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" : ""}
                        { dataHistory.status=="red" ? "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" : ""}
                        { dataHistory.status=="orange" ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" : ""}

                    </Text>
                </TouchableOpacity>
            </View>

            <View style={{marginTop:5, height:'auto',}}>
                <Text style={[ styles.line ,{fontSize:16, } ]}><MaterialCommunityIcons name="face-woman-profile" size={20} color="black"/> 
                <Text style={styles.textFront}>‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: </Text>
                <Text style={styles.textBack}>{dataHistory.nameWin}</Text>
                </Text>


                <View style={[styles.line , { flexDirection:'row', justifyContent:'space-between'}]}>
                <Text style={{fontSize:16 }}>
                    <Feather name="calendar" size={20} color="black" /> 
                    <Text style={styles.textFront}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: </Text>
                    <TouchableOpacity style={{borderWidth:1, borderBlockColor:"#FF724C"}} onPress={()=>{
                        console.log("Click Date");  
                        setShowDatePicker(true)
                    }}>
                        <View style={{}}>
                            <Text style={styles.textBack}>{moment(date).format('DD/MM/YYYY')}</Text>
                            {/* <Text style={styles.textBack}>{dataHistory.date}</Text> */}
                            
                        </View>
                    </TouchableOpacity>
                    {showDatePicker && (
                        <DateTimePicker
                        value={date}
                        mode={"date"}
                        is24Hour={true}
                        onChange={onChangeDate}
                        />
                    )}

                    {/* <Text style={styles.textBack}>{dataHistory.date}</Text> */}
                </Text>
                <Text style={{fontSize:13, }}>
                    <MaterialCommunityIcons name="face-woman-profile" size={20} color="black"/> 
                    <Text style={styles.textFront}>‡πÄ‡∏ß‡∏•‡∏≤: </Text>
                    {/* <Text style={styles.textBack}>{dataHistory.time}</Text> */}
                    <TouchableOpacity style={{borderWidth:1, borderBlockColor:"#FF724C"}} onPress={()=>{
                                console.log("Click Time");  
                                setShowTimePicker(true)
                            }}>
                                <View style={{}}>
                                    <Text style={styles.textBack}>{moment(time).format('HH:mm')}</Text>
                                </View>
                            </TouchableOpacity>
                            {/* ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏à‡∏∞‡πÇ‡∏ä‡∏ß‡πå ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ ‡πÇ‡∏î‡∏¢ value = time */}
                            {showTimePicker && (
                                <DateTimePicker
                                    value={time}
                                    mode={"time"}
                                    is24Hour={true}
                                    onChange={onChangeTime}
                                />
                            )}
                </Text>
                </View>
                

                <View style={[styles.line, ]}>
                    
                    <Text style={styles.textFront}><MaterialCommunityIcons name="map-marker-outline" size={20} color="black" />‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: </Text>
                    <TextInput 
                        style={{borderWidth:1, width:"100%", height:"auto", padding: 10, marginTop:"6%",}}
                        onChangeText={setPlace}
                        value={place}
                    />
                     

                </View>

                <View style={[styles.line, {fontSize:13,}]}>
                    <Text style={styles.textFront}><Entypo name="list" size={20} color="black" />‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: </Text> 
                    <TextInput
                        editable
                        multiline
                        numberOfLines={3} //‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏ä‡∏ß‡πå ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏™‡πÑ‡∏•‡∏î‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô
                        maxLength={200}
                        style={[styles.textBack, {marginTop:"3%", fontSize:13,borderWidth:1, borderBlockColor:"#FF724C", paddingLeft: 10}]}
                        onChangeText={setDetail}
                        value={detail}
                    />
                </View>
                
                <View style={[styles.line, {fontSize:13,}]}>
                {/* <Text style={styles.textFront}><AntDesign name="picture" size={20} color="black" />‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô: </Text>  */}
                </View>

            </View>


             

            { dataHistory.status=="red" && (
                <View style={[styles.line, {flex:0.2, justifyContent:'center', alignContent:'space-around', flexDirection:'row'}]}>
                    <TouchableOpacity style={[styles.statusRedButton,{backgroundColor: "#05A56B"}]}
                        onPress={() => {
                            updateStore(id, dataHistory, dataUser, navigation, time, date, detail, place);
                        }}
                    >
                        <AntDesign name="checkcircleo" size={24} color="white" />
                        <Text style={[styles.statusRedText, {color:"white"}]}>‡∏ï‡∏Å‡∏•‡∏á</Text>
                    </TouchableOpacity>
                    <TouchableOpacity onPress={()=>{
                            // console.log("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å");
                            navigation.goBack()
                        }} 
                        style={[styles.statusRedButton ,{marginLeft:"3%", borderColor:"#C95454"}]}>
                        <AntDesign name="closecircleo" size={24} color="#C95454" />
                        <Text style={[styles.statusRedText, {color:"#C95454"}]}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Text>
                    </TouchableOpacity>
                </View>
            )}

        </View>
        </ScrollView>
    </SafeAreaView>
  )
}



const styles = StyleSheet.create({
    container: {
      flex: 1,
      marginTop: StatusBar.currentHeight || 0,
    },
    scrollView: {

        marginHorizontal: 10,
      },
    list: {
        flex: 1,
        // marginHorizontal:"5%",
        // backgroundColor:"cyan",
        // marginTop:"5%"
    },
    touchOpacity: {
        borderRadius: 10,
        width:"100%",
        padding: 15,// ‡πÅ‡∏Å‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°
        flexDirection:'row',
        // justifyContent:'center',
        marginTop:"3%"
        
    },
    // ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    line: {
      marginTop:"6%",
      height:"auto"
    },
    // ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ style ‡∏Ç‡∏≠‡∏á ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏û‡∏ß‡∏Å Ex. ‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    textFront: {
      fontWeight:'bold',
      fontSize:20
    },
    textBack: {
      fontSize:16,
    },
    statusRedButton: {
        flexDirection:'row',
        justifyContent:'center',
        borderWidth:1,
        alignItems:'center',
        alignSelf:'center',
        paddingHorizontal:"10%",
        paddingVertical:"3%",
        borderRadius:10,
    },
    statusRedText: {
        margin:"2.5%",
        paddingLeft:"5%"
    },
      
       
});
  




export default UpdateForm


